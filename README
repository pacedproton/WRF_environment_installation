README WRF Environment Installation script facilitates the installation of the dependencies 
for WRF/WRF-Chem/WPS.

Buildtime: All the necessary parameterization is to fill out the block marked for required parameters.

Required environment:
    RHEL/CentOS Linux (tested 7.6)
    Intel Parellel Studio (tested 19.1.0)
    cmake (tested 3.15.1)
    perl (tested 5.26.2)
    automake (tested 1.16.1 for lex/yacc otherwise 1.13.4) 
    gettext (tested 0.19.8.1)
    yacc (tested 1.9)
    flex (tested 2.6.4)

The Intel compilers, Intel MPI, cmake and perl need to be loadable through the module facility.
This script requires 2 passes to build WRF, 3 for WRF/WPS. 


(1) Edit the script worf.sh parameter block top of the file to match the local environment.

(2) Change to the script directory and run it from a bash shell: bash ./worf.sh

(3) If testing was enabled (test='test') then the total compile time for the environment 
    dependencies on a 2020 high-end SMP is around an hour wallclock time; without testing about 20'/

(4) Check if the dependencies have all been deployed to 
    <PREFIX><CATEGORY>

(5) Source the WRF_ENVIRONMENT file (default location: ${PREFIX}/${PACKAGES}/wrf_environment.sh)
    source wrf_environment.sh 

(6) Load the compiler module matching the parameter block, e.g.
    module load intel/19.1.0

    load the MPI module matching the parameter block, e.g.
    module load intel-mpi/2019.6

(6) Configure WRF: ./configure [-d without optimization]

        edit configure.wrf, e.g. with
        DM_FC=mpiifort
        DM_CC=mpiicc

    issue clean before making changes to recompile or clean -a which also overwrites configure.wrf
 
(7) Compile WRF: ./compile <model name>
    a 2020 high-end SMP machine takes around an hour -O3 optmized wallclock compile time;
    about 10' unoptimized. 

(8) For WRF-Chem compile the external emissions conversion as well: ./compile emi_conv
       
(9) Configure WPS: run: bash worf.sh wps 
    for a WPS build environment and follow the screen-printed instructions

    run ./configure and select option 19 for Intel/distributed memory parallelism

    edit the resulting file configure.wps with:
    DM_FC: mpiifort
    DM_CC: mpiicc
    LDFAGS: -qoopenmp

    then edit the library and include paths from the generated wrf_environment.sh file
    (see paramter section and wrf_environment.sh for the respective locations)

    COMPRESSION_LIBS=-L<jasperpath>/lib -L<zlibpath>/lib -L<libpngpath>/lib -ljasper -lpng -lz
    COMPRESSION_INC=-I<jasperpath>/include -I<zlibpath>/include -I<libpngpath>/include

    Example:

    COMPRESSION_LIBS=-L/gpfs/data/home/username/opt/jasper/lib64 -L/gpfs/data/data/home/usernameme/opt/zlib/lib -L/gpfs/data/data/home/username/opt/libpng/lib -ljasper -lpng -lz
    COMPRESSION_INC=-I/gpfs/data/home/username/opt/jasper/include -L/gpfs/data/home/username/opt/zlib/lib -L/gpfs/data/home/username/opt/libpng/lib

    then run ./compile
   
    geogrid.exe, metgrid.exe and ungrib.exe in the wps package directory signify a successful build



Runtime/Batch:

Always first source the WRF_ENVIRONMENT file (default location: ${PREFIX}/${PACKAGES}/wrf_environment.sh)
e.g. source wrf_environment.sh 

